#pragma once
//#include "windows.h"
#include "vcmtypes.h"
#include "time.h"
//extern SYSTEM_INFO system_info;
extern size_t page_size;
void vcm_global_init();
size_t MSB(size_t n);
void vcmref_insert(VCMREF *ref,char **new_ref);
void vcmref_remove(VCMREF *ref,char **delete_ref);
void vcmref_free(VCMREF *ref);
void vcmref_shift(VCMREF *ref,__int64 steps);
void cc_init(VCMCC *cc,size_t index,char **pointer,size_t size,VCMREF *refs);
size_t cc_offset(VCMCC *cc);
char *cc_mapping_address(VCMCC *cc);
char *cc_next_address(VCMCC *cc);
char *cc_next_mapping_address(VCMCC *cc);
size_t cc_last_page_offset(VCMCC *cc);
size_t cc_num_of_pages(VCMCC *cc);
size_t cc_guest_bytes(VCMCC *cc);
size_t cc_prior_free_bytes(VCMCC *cc);
void hcc_init(VCMHCC *hcc);
void hcc_init_fit(VCMHCC *hcc,size_t fit_pfns,size_t fit_c);
size_t hcc_cc_size(VCMHCC *hcc,size_t index);
VCMCC hcc_getcc(VCMHCC *hcc,size_t index);
void hcc_fit_pfns(VCMHCC *hcc,size_t pfns_num);
void hcc_fit_c(VCMHCC *hcc,size_t cc_num);
size_t hcc_pfns_position(VCMHCC *hcc,size_t i_start,size_t i_end);
size_t hcc_search(VCMHCC *hcc,char *p);
size_t hcc_search_c(VCMHCC *hcc,char *p);
void hcm_init(VCMHCM *hcm);
void hcm_init_fit(VCMHCM* hcm, size_t hc_max);
void hcm_fit(VCMHCM *hcm,size_t max);
size_t hcm_search_hc(VCMHCM *hcm,char *p);
size_t hcm_search_c(VCMHCM *hcm,char *p);
char *hcm_virtualalloc(VCMHCM *hcm,size_t *hc_size);
void hcm_insert_hc(VCMHCM *hcm,size_t size);
void hcm_insert_hc_fit(VCMHCM *hcm,size_t size,size_t fit_pfns,size_t fit_c);
char *hcm_insert_c(VCMHCM *hcm,size_t hcc_index,size_t size);
void hcm_insert_c_r(VCMHCM *hcm,char *hca,char **userpointer,size_t size);
void hcm_insert_ref(VCMHCM *hcm,char *pointer,char **reference);
void hcm_remove_ref(VCMHCM *hcm,char *pointer,char **reference);
void hcm_remove_hc(VCMHCM *hcm,char *hypercontainer_address);
char* hcm_realloc_c(VCMHCM *hcm, char *user_pointer, size_t new_size);
void hcm_resize_c(VCMHCM *hcm,char *user_pointer,size_t newSize);
void hcm_multiresize_c(VCMHCM* hcm, char* user_pointer, size_t* sizes_array, size_t array_size);
void hcm_clear(VCMHCM *hcm);
void hcm_print(VCMHCM* hcm);
VCMMEM  hcm_get_memuseage(VCMHCM* hcm);
extern VCMHCM default_hcm;
char *vc_hcalloc(size_t size);
char *vc_malloc(char *hc,size_t size);
void *vc_malloc_r(char *hc_addr,char **user_pointer,size_t size);
void vc_addref(char *p,char **r);
void vc_removeref(char *p,char **r);
char *vc_resize(char *user_ptr,size_t new_size);
void vc_multiresize(char* user_ptr, size_t* sizes_array, size_t array_size);
char *vc_realloc(char *user_ptr,size_t new_size);
void vc_hcfree(char *hcc);
extern VCMHCA default_hca;
extern VCMHCM hca_hcm;
void hca_init(size_t hc_size, size_t c_per_hc, size_t hc_num);
char *vca_malloc(size_t size);
char *vca_calloc(size_t n,size_t size);
void vcar_malloc(char **user_pointer,size_t size);
void vca_resize(char* user_pointer, size_t new_size);
void vca_multiresize(char* user_ptr, size_t* sizes_array, size_t array_size);
char* vca_realloc(char* user_pointer, size_t new_size);
extern VCMTHC vcmthc;
void vcm_init_th(size_t hc_size_th,size_t c_num_th);
size_t vc_search_th(unsigned long thid);
void vc_malloc_th(char **user_pointer,size_t size);
void vc_realloc_th(char *user_pointer,size_t new_size);
